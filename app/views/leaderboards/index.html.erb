<!-- app/views/leaderboards/index.html.erb -->

<%= render 'leaderboards/leaderboards_breadcrumbs' %>

<div class="mx-auto max-w-2xl lg:max-w-4xl shadow-md p-8 bg-white rounded-md my-4">
  <h1 class="font-bold text-2xl mb-4 w-full text-center">Leaderboards</h1>

  <!-- Advanced filters form -->
  <div class="w-full mb-4 px-4">
    
    <%= form_with url: leaderboards_path, method: :get, id: 'leaderboard_form' do |form| %>
      <%= select_tag 'track_type', options_for_select(Track.track_type_options), prompt: 'Select Track Type', id: 'track_type_select' %>

      <%= select_tag 'track_name', options_for_select([]), prompt: 'Select Track', id: 'leaderboards_by_track_name_select', disabled: true %>

      <%= select_tag 'track_conditions', options_for_select([]), prompt: 'Select Track Condition', id: 'track_condition_select', disabled:true %>

      <%= submit_tag 'Search', id: 'search_button', disabled: true %>
    <% end %>
  </div>

  <div>
    <% if @leaderboards.present? %>
      <% @leaderboards.each do |leaderboard| %>
        <div class="w-full sm:w-1/2 md:w-1/3 lg:w-1/4 p-4 shadow border border-gray-200 bg-gray-100 mb-4 mx-2">
          <%= link_to track_leaderboard_path(leaderboard.track, leaderboard), class: "block font-bold mb-2 text-xl", method: :get do %>
            üèÅ <%= leaderboard.track.track_name %>
          <% end %>
          <div><strong>Condition:</strong> <%= leaderboard.track_condition %></div>
        </div>
      <% end %>
    <% else %>
    <p class="w-full text-center">No leaderboard entries found.</p>
    <% end %>
  </div>

</div>

<script>
  document.addEventListener("turbo:load", function() {
    console.log("Turbo loaded"); // Check if this is logging multiple times
    const trackTypeSelect = document.getElementById('track_type_select');
    console.log(trackTypeSelect); // Check the value here
    if (trackTypeSelect) {
      const leaderboardsByTrackNameSelect = document.getElementById('leaderboards_by_track_name_select');
      const trackConditionSelect = document.getElementById('track_condition_select');

      // Enable the next dropdown based on the current selection
      const enableSelect = (selectElement, enable) => {
        selectElement.disabled = !enable;
        if (!enable) selectElement.innerHTML = '';
      };

      // Listen to Turbo Stream events when updates to the 'track_name_select' occur
      document.addEventListener("turbo:after-stream-render", function(event) {
        if (event.target.id === 'leaderboards_by_track_name_select') {
          enableSelect(leaderboardsByTrackNameSelect, true);
          enableSelect(trackConditionSelect, false);
        }
      });

      // Listen to Turbo Stream events when updates to the 'track_condition_select' occur
      document.addEventListener("turbo:after-stream-render", function(event) {
        if (event.target.id === 'track_condition_select') {
            console.log('track condition select turbo:after-stream-render fired');
          enableSelect(trackConditionSelect, true);
        }
      });

      // Fetch Tracks by selected Track Type
      trackTypeSelect.addEventListener('change', function() {
        enableSelect(leaderboardsByTrackNameSelect, false);
        fetch('/leaderboards_by_track_type?track_type=' + encodeURIComponent(this.value), {
          method: 'GET',
          headers: {
            'Accept': 'text/vnd.turbo-stream.html',
          }
        }).then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.text();
        }).then(responseText => {
          Turbo.renderStreamMessage(responseText);
          enableSelect(leaderboardsByTrackNameSelect, true);
        }).catch(error => {
          console.error('Failed to fetch tracks:', error);
        });
      });

      // Fetch Leaderboards by selected Track Name
      trackNameSelect.addEventListener('change', function() {
        fetch('/leaderboards_by_track?track_name=' + encodeURIComponent(this.value), {
          method: 'GET',
          headers: {
            'Accept': 'text/vnd.turbo-stream.html',
          }
        }).then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.text();
        }).then(responseText => {
          Turbo.renderStreamMessage(responseText);
          enableSelect(trackConditionSelect, true);
        }).catch(error => {
          console.error('Failed to fetch leaderboards:', error);
        });
      });

      // Enable the search button when all selections have been made
      trackConditionSelect.addEventListener('change', function() {
        const searchButton = document.getElementById('search_button');
        searchButton.disabled = !(trackTypeSelect.value && trackNameSelect.value && this.value);
      });
    } else {
      console.log("trackTypeSelect not found!");
    }
  });
</script>
